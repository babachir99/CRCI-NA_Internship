"""
BA_Mohamed
p_a_function

Ce script définit une fonction 'bach' qui affiche un motif particulier sur un Unicorn HAT HD
en utilisant la bibliothèque unicorn_hat_sim.

"""

def nbMatrice():
    return 2 

def pression_atmospherique(matrice):
    """
    >>> pression_atmospherique = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1, 0],[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    """

    # Définir les couleurs par défaut (a et b)
    a = 1
    b = 2

    # Définir le motif 'p_a' comme un tableau 2D de 16x16
    pression_atmospherique = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, b, b, b, 0, b, b, b, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    pression_atmospherique_2 = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, 0, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, b, b, b, 0, b, b, b, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, b, 0, 0, 0, b, 0, 0, 0, 0, a, a, a, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        
    ]
   
    if (matrice == 1):
            return pression_atmospherique
    elif (matrice == 2):
            return pression_atmospherique_2

if __name__ == "__main__":
    import doctest
    doctest.testmod()


"""
On pourrait mettre en place une autre matrice qui se chargerait en fonction de la valeur metrique
"""