#Mohamed BA
#Création d'une matrice 16x16 pour afficher une alerte météo concernant un phénomène couvert

#definition d'une fonction qui va permettre d'alterner entre les 2 images pour créer un effet d'animation.

def nbMatrice():
    return 2


def couvert(matrice):
    """

    La fonction définit un motif de 16x16 représenté par un tableau 2D 'couvert'.
    Chaque élément dans 'couvert' est soit (0,0,0) pour un pixel noir, soit une couleur RGB spécifiée.
    Le motif est ensuite affiché sur le Unicorn HAT HD, et l'affichage dure 15 secondes.

    >>> couvert(1)
    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    """

    # Définir une couleur par défaut (a)
    a = 3

    # Définir le motif 'couvert' comme un tableau 2D de 16x16

    couvert =    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, a, a, a, 0, 0, 0, 0],
                [0, 0, 0, 0, a, a, a, 0, a, a, a, a, a, 0, 0, 0],
                [0, a, a, a, a, a, a, a, a, a, a, a, a, 0, 0, 0],
                [a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, 0],
                [a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, 0],
                [0, a, a, a, a, a, a, a, a, a, a, a, a, a, 0, 0],
                [0, 0, 0, a, a, a, a, a, a, a, a, a, a, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ]
    
    couvert_2 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a, a, a, 0, 0, 0],
                [0, 0, 0, 0, 0, a, a, a, 0, a, a, a, a, a, 0, 0],
                [0, 0, 0, a, a, a, a, a, a, a, a, a, a, a, 0, 0],
                [0, 0, a, a, a, a, a, a, a, a, a, a, a, a, a, a],
                [0, 0, a, a, a, a, a, a, a, a, a, a, a, a, a, a],
                [0, 0, 0, a, a, a, a, a, a, a, a, a, a, a, a, 0],
                [0, 0, 0, 0, a, a, a, a, a, a, a, a, a, a, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ]

  
    if (matrice == 1):
        return couvert
    elif (matrice == 2):
        return couvert_2

if __name__ == "__main__":
    import doctest
    doctest.testmod()
